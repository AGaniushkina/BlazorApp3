@page "/booking"
@using Microsoft.AspNetCore.Components.Web
@using Microsoft.AspNetCore.Components.Forms
@using System.ComponentModel.DataAnnotations
@using Smart.Blazor;
@using Newtonsoft.Json;
@using BlazorApp2.Shared;
@inject HttpClient client;

<style>
    smart-carousel {
        width: 100%;
        height: 300px;
    }

    #carouselWithCaptions .smart-carousel-item-label {
        padding: 3px;
        background-color: rgba(0, 0, 0, 0.3);
        color: white;
    }

    .card-body {
        margin-bottom: 100px;
    }

    .flights-card {
        background-color: #f9f9f9;
        border-radius: 10px;
        padding: 20px;
        box-shadow: 0 2px 4px rgba(0, 0, 0, 0.1);
        position: absolute;
        top: 95%;
        left: 50%;
        transform: translate(-50%, -50%);
    }

    .container {
        display: flex;
        padding: 5px;
    }

    /*table style*/
    .table {
        width: 100%;
        border: none;
        margin-bottom: 20px;
        border-collapse: separate;
    }

        .table thead th {
            font-weight: bold;
            text-align: left;
            border: none;
            padding: 10px 15px;
            background: #EDEDED;
            font-size: 16px;
            border-top: 1px solid #ddd;
        }

        .table tr th:first-child, .table tr td:first-child {
            border-left: 1px solid #ddd;
        }

        .table tr th:last-child, .table tr td:last-child {
            border-right: 1px solid #ddd;
        }

        .table thead tr th:first-child {
            border-radius: 20px 0 0 0;
        }

        .table thead tr th:last-child {
            border-radius: 0 20px 0 0;
        }

        .table thead tr th {
            text-align: center; /* выровнять содержимое ячейки по центру */
        }

        .table tbody td {
            text-align: left;
            border: none;
            padding: 10px 15px;
            font-size: 16px;
            vertical-align: top;
            text-align: center; /* выровнять содержимое ячейки по центру */
        }

        .table tbody tr:nth-child(even) {
            background: #F8F8F8;
        }

        .table tbody tr:last-child td {
            border-bottom: 1px solid #ddd;
        }

            .table tbody tr:last-child td:first-child {
                border-radius: 0 0 0 20px;
            }

            .table tbody tr:last-child td:last-child {
                border-radius: 0 0 20px 0;
            }

    td {
        text-align: center; /* выровнять содержимое ячейки по центру */
    }

    /* Dialog window for booking */
    .smart-element.smart-window {
        width: 700px;
        height: 600px;
    }
</style>

<PageTitle>My Booking</PageTitle>

<h1>My Booking</h1>
<div style="position: relative;">
    <div class="card-body">
        <Carousel Class="slide" AutoPlay DataSource="dataSource" HideIndicators Interval="8000" Loop SlideShow />
     </div>
    <div class="flights-card">
        <EditForm Model="@Model">
            <p>
                <br />
                <InputText @bind-Value="Model!.login"/>
            </p>

            <p>
                <br />
                <InputText @bind-Value="Model!.Id"/>
            </p>
            <div style="display: flex; justify-content: flex-end;">
                <Button Class="primary" OnClick="@GetFlights">Найти</Button>
            </div>
        </EditForm>
    </div>
    
</div>

@code {

    public PassengerInfo? Model { get; set; }
    public List<Passenger> Passengers { get; set; } = new List<Passenger>();

    //protected override void OnInitialized() => Model ??= new();

    protected override async Task OnInitializedAsync()
    {
        Model ??= new();

        var request = new HttpRequestMessage
            {
                Method = HttpMethod.Get,
                RequestUri = new Uri("https://localhost:7123/api/passengers")
            };

        using (var response = await client.SendAsync(request))
        {
            response.EnsureSuccessStatusCode();
            var body = await response.Content.ReadAsStringAsync();
            if (body != null)
                Passengers = JsonConvert.DeserializeObject<IEnumerable<Passenger>>(body).ToList();
        }
    }

    public class PassengerInfo
    {
        public string? login { get; set; } = "Email";
        public string? Id { get; set; } = "Document series and number";
    }

    List<Dictionary<string, string>> dataSource = new List<Dictionary<string, string>>()
    {
        // TODO: Скачать изображения и поместитьв проект (использовать относительный путь)
        new Dictionary<string, string>() { { "image", "./CarouselImage/plane-passing-by-sun-cloudy-day.jpg" } },
        new Dictionary<string, string>() { { "image", "./CarouselImage/wing-airplane-blue-sky-twilight-sunset.jpg" } },
        new Dictionary<string, string>() { { "image", "./CarouselImage/young-female-traveler-enjoying-rural-surroundings.jpg" } }
    };

    private async Task GetFlights()
    {
    //     string? passengerId = Passengers.Where(r => r.DocumentSeriesAndNumber == Model!.Id
    //                             && r.Email == Model!.login)
    //                             .Select(r => r.Id).SingleOrDefault();

    //     var requestPassenger = new HttpRequestMessage
    //         {
    //             Method = HttpMethod.Get,
    //             RequestUri = new Uri($"https://localhost:7123/api/passengers?passengerId={passengerId}")
    //         };

    //     var requestFlights = new HttpRequestMessage
    //         {
    //             Method = HttpMethod.Get,
    //             RequestUri = new Uri($"https://localhost:7123/api/passengers?routeId")
    //         };

    //     using (var response = await client.SendAsync(requestFlights))
    //     {
    //         response.EnsureSuccessStatusCode();
    //         var body = await response.Content.ReadAsStringAsync();
    //         if (body != null)
    //             Passengers = JsonConvert.DeserializeObject<IEnumerable<Passenger>>(body).ToList();
    //     }
    }
}
