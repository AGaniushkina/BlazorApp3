@page "/purchase"
@using System.ComponentModel.DataAnnotations
@using Microsoft.AspNetCore.Components.Web
@using Microsoft.AspNetCore.Components.Forms
@using Smart.Blazor;
@using BlazorApp2.Shared;
@using Newtonsoft.Json;
@inject HttpClient client;

<style>
    smart-carousel {
        width: 100%;
        height: 300px;
    }

    #carouselWithCaptions .smart-carousel-item-label {
        padding: 3px;
        background-color: rgba(0, 0, 0, 0.3);
        color: white;
    }

    .card-body {
        margin-bottom: 100px;
    }

    .card {
        background-color: #f9f9f9;
        border-radius: 10px;
        padding: 20px;
        box-shadow: 0 2px 4px rgba(0, 0, 0, 0.1);
        
        position: absolute;
        top: 95%;
        left: 50%;
        transform: translate(-50%, -50%);
    }

    .container {
        display: flex;
        padding: 5px;
    }
</style>

<PageTitle>Purchase</PageTitle>

<h1>Purchase</h1>
<div style="position: relative;">
<div class="card-body">
    <Carousel Class="slide" AutoPlay DataSource="dataSource" HideIndicators Interval="8000" Loop SlideShow />
</div>
    <div class="card">
    <EditForm Model="@Model" OnValidSubmit="@Submit">
        <DataAnnotationsValidator />
        <ValidationSummary />
        <div>
            <div class="container">
                    <DropDownList 
                        style="margin: 10px;" 
                        DataSource="@directions" 
                        Filterable="true" @bind-SelectedValues="@selectedItemsFrom" 
                        OnItemClick="OnItemClickFrom" 
                        Label="Город вылета"></DropDownList>
                    <DropDownList 
                        style="margin: 10px;" 
                        DataSource="@directions" 
                        Filterable="true" @bind-SelectedValues="@selectedItemsTo" 
                        OnItemClick="OnItemClickTo" 
                        Label="Город прилета"></DropDownList>
            </div>
            <div class="container">
                <DateInput style="margin: 10px;"
                    OnChange=@OnChangeDepartingDate
                    Locale="ru"
                    Placeholder="Туда"></DateInput>
                <DateInput style="margin: 10px;"
                    OnChange=@OnChangeReturningDate
                    Locale="ru"
                    Placeholder="Обратно"></DateInput>
            </div>
        </div>
            <div style="display: flex; justify-content: flex-end;">
            <Button Class="primary">Найти</Button>
        </div>
    </EditForm>
    </div>
</div>

<Table Id="basicTable" Tooltip>
    <tr hidden>
        <th>First Name</th>
        <th>Last Name</th>
        <th>Quantity</th>
        <th>Date</th>
        <th>Action</th>
    </tr>
    @foreach (var record in dataRecords)
    {
        <tr hidden>
            <td>@record.ArrivalDate</td>
            <td>@record.FlightNumber</td>
            <td><div class="actions-container"><span class="material-icons">edit</span><span class="material-icons">delete_forever</span></div></td>
        </tr>
    }
</Table>

    <hr />
    <div>
        <p>From: @Model!.DirectionFrom</p>
        <p>To: @Model!.DirectionTo</p>
        <p>Departing: @Model!.Departing</p>
        <p>Returning: @Model!.Returning</p>
        <p>Passengers Count: @Model!.PassengersCount</p>
    </div>


@code {
    public Flight2? Model { get; set; }
    public List<Route> Routes { get; set; } = new List<Route>();
    private List<Flight> dataRecords;

    protected override async Task OnInitializedAsync()
    {
        Model ??= new();

        var request = new HttpRequestMessage
            {
                Method = HttpMethod.Get,
                RequestUri = new Uri("https://localhost:7123/api/routes")
            };

        using (var response = await client.SendAsync(request))
        {
            response.EnsureSuccessStatusCode();
            var body = await response.Content.ReadAsStringAsync();
            if (body != null)
                Routes = JsonConvert.DeserializeObject<IEnumerable<Route>>(body).ToList();
        }
        departureCities = Routes?.Select(r => r.DepartureCity).Distinct().ToList();
    }

    private void Submit()
    {
        //Logger.LogInformation("Id = {Id}", Model?.Id);
    }

    //public class Starship
    //{
    //    [Required]
    //    [StringLength(10, ErrorMessage = "Id is too long.")]
    //    public string? Id { get; set; }
    //}
    public class Flight2
    {
        [Required]
        [StringLength(100, ErrorMessage = "String is too long.")]
        public string? DirectionFrom { get; set; } = "";
        public string? DirectionTo { get; set; } = "";
        public DateTime Departing { get; set; } = DateTime.Now;
        public DateTime Returning { get; set; } = DateTime.Now.AddHours(24);
        public int PassengersCount { get; set; } = 1;

    }

    List<Dictionary<string, string>> dataSource = new List<Dictionary<string, string>>()
    {
        // TODO: Скачать изображения и поместитьв проект (использовать относительный путь)
        new Dictionary<string, string>() { { "image", "https://img.freepik.com/free-photo/airplane-sunset_1150-8338.jpg?t=st=1711895847~exp=1711899447~hmac=f384f55efd0b93894b1695d6a6c2e63b4e13cfe0295dfa11db140737c1b84b9f&w=996" } },
        new Dictionary<string, string>() { { "image", "https://img.freepik.com/free-photo/plane-passing-by-sun-cloudy-day_1286-143.jpg?t=st=1711895909~exp=1711899509~hmac=b4a0afd92b535ff3792f3794a6439aedb051548889c40a7309dfeb3bf73c8124&w=1060" } }
    };

    // For tests without mongodb
    string[] directions = new string[] { "Moscow, Russia", "Saratov, Russia", "Samara, Russia" };

    List<string> departureCities = new List<string>();
    List<string> arrivalCities = new List<string>();

    string[] selectedItemsFrom = new string[] { };
    string[] selectedItemsTo = new string[] { };

    private void OnItemClickFrom(Event ev)
    {
        DropDownListItemClickEventDetail detail = ev["Detail"];
        Model!.DirectionFrom = selectedItemsFrom[0];

        arrivalCities = Routes
                            .Where(r => r.DepartureCity == selectedItemsFrom[0])
                            .Select(r => r.ArrivalCity)
                            .ToList();
    }

    private void OnItemClickTo(Event ev)
    {
        DropDownListItemClickEventDetail detail = ev["Detail"];
        Model!.DirectionTo = selectedItemsTo[0];
    }

    private void OnChangeDepartingDate(Event eventObj)
    {
        DateInputChangeEventDetail detail = eventObj["Detail"];
        Model!.Departing = detail.Value.AddDays(1);
    }

    private void OnChangeReturningDate(Event eventObj)
    {
        DateInputChangeEventDetail detail = eventObj["Detail"];
        Model!.Returning = detail.Value.AddDays(1);
    }
}


