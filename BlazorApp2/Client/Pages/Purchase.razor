@page "/purchase"
@using System.ComponentModel.DataAnnotations
@using Microsoft.AspNetCore.Components.Web
@using Microsoft.AspNetCore.Components.Forms
@using Smart.Blazor;
@using BlazorApp2.Shared;
@using Newtonsoft.Json;
@inject HttpClient client;

<PageTitle>Purchase</PageTitle>

<h1>Purchase</h1>

    <EditForm Model="@Model" OnValidSubmit="@Submit">
        <DataAnnotationsValidator />
        <ValidationSummary />
        <div>
            <p>
                From:<br />

                <DropDownList DataSource="@departureCities" Filterable="true" @bind-SelectedValues="@selectedItemsFrom" OnItemClick="OnItemClickFrom"></DropDownList>
            </p>
            <p>
                To:<br />
                <DropDownList DataSource="@arrivalCities" Filterable="true" @bind-SelectedValues="@selectedItemsTo" OnItemClick="OnItemClickTo"></DropDownList>
            </p>
            <p>
                Departing:<br />
                <InputDate @bind-Value="Model!.Departing" />
            </p>
            <p>
                Returning:<br />
                <InputDate @bind-Value="Model!.Returning" />
            </p>
            <p>
                Passengers Count:<br />
                <InputNumber @bind-Value="Model!.PassengersCount" />
            </p>

        </div>

        <button type="submit">Find</button>
    </EditForm>

    <hr />
    <div>
        <p>From: @Model!.DirectionFrom</p>
        <p>To: @Model!.DirectionTo</p>
        <p>Departing: @Model!.Departing</p>
        <p>Returning: @Model!.Returning</p>
        <p>Passengers Count: @Model!.PassengersCount</p>
    </div>


@code {
    public Flight2? Model { get; set; }
    public List<Route> Routes { get; set; } = new List<Route>();

    protected override async Task OnInitializedAsync()
    {
        Model ??= new();

        var request = new HttpRequestMessage
            {
                Method = HttpMethod.Get,
                RequestUri = new Uri("https://localhost:7123/api/routes")
            };

        using (var response = await client.SendAsync(request))
        {
            response.EnsureSuccessStatusCode();
            var body = await response.Content.ReadAsStringAsync();
            if (body != null)
                Routes = JsonConvert.DeserializeObject<IEnumerable<Route>>(body).ToList();
        }
        departureCities = Routes?.Select(r => r.DepartureCity).Distinct().ToList();
    }

    private void Submit()
    {
        //Logger.LogInformation("Id = {Id}", Model?.Id);
    }

    //public class Starship
    //{
    //    [Required]
    //    [StringLength(10, ErrorMessage = "Id is too long.")]
    //    public string? Id { get; set; }
    //}
    public class Flight2
    {
        [Required]
        [StringLength(100, ErrorMessage = "String is too long.")]
        public string? DirectionFrom { get; set; } = "";
        public string? DirectionTo { get; set; } = "";
        public DateTime Departing { get; set; } = DateTime.Now;
        public DateTime Returning { get; set; } = DateTime.Now.AddHours(24);
        public int PassengersCount { get; set; } = 1;

    }

    List<string> departureCities = new List<string>();
    List<string> arrivalCities = new List<string>();

    string[] selectedItemsFrom = new string[] { };
    string[] selectedItemsTo = new string[] { };

    private void OnItemClickFrom(Event ev)
    {
        DropDownListItemClickEventDetail detail = ev["Detail"];
        Model!.DirectionFrom = selectedItemsFrom[0];

        arrivalCities = Routes
                            .Where(r => r.DepartureCity == selectedItemsFrom[0])
                            .Select(r => r.ArrivalCity)
                            .ToList();
    }

    private void OnItemClickTo(Event ev)
    {
        DropDownListItemClickEventDetail detail = ev["Detail"];
        Model!.DirectionTo = selectedItemsTo[0];
    }
}


